#include "system_infor.h" // Bao gồm file header khai báo lớp SystemInfor
#include <windows.h>      // Header chính cho Windows API, cần cho các hàm như GetVolumeInformationA, GetUserNameA, GetComputerNameA
#include <string>         // Cần cho việc sử dụng std::string
#include <cstdio>         // Cần cho các hàm xử lý file C-style như _popen, fgets, _pclose (trong các hàm lấy IP, Location, OS)
#include <algorithm>      // Cần cho std::remove (trong các hàm getComputer, getIp, getLocation, getOs để xóa ký tự xuống dòng)

// Khai báo sử dụng namespace std để không cần gõ std:: trước string, cout, v.v.
using namespace std;

// Constructor (hàm khởi tạo) của lớp SystemInfor.
// Được gọi tự động khi một đối tượng SystemInfor được tạo.
// Hiện tại không có hành động khởi tạo cụ thể nào.
SystemInfor::SystemInfor() {};

// Destructor (hàm hủy) của lớp SystemInfor.
// Được gọi tự động khi một đối tượng SystemInfor bị hủy (ví dụ: ra khỏi phạm vi hoặc bị delete).
// Hiện tại không có hành động dọn dẹp cụ thể nào.
SystemInfor::~SystemInfor() {}

// Hàm tổng hợp và trả về thông tin hệ thống dưới dạng một chuỗi.
string SystemInfor::getSystemInfor() {
    string info; // Chuỗi để xây dựng thông tin tổng hợp.

    // Gọi các hàm thành viên khác để lấy từng thông tin cụ thể
    // và nối chúng vào chuỗi `info` với định dạng mong muốn.
    info += "HWID: " + getHwid() + "\n";         // Lấy Hardware ID (dựa trên số serial ổ đĩa C)
    info += "User: " + getUser() + "\n";         // Lấy tên người dùng hiện tại
    info += "Computer: " + getComputer() + "\n"; // Lấy tên máy tính
    info += "IP: " + getIp() + "\n";             // Lấy địa chỉ IP public
    info += "Location: " + getLocation() + "\n"; // Lấy thông tin quốc gia dựa trên IP
    info += "OS: " + getOs() + "\n";             // Lấy tên hệ điều hành

    return info; // Trả về chuỗi thông tin đã được tổng hợp.
}

// Hàm lấy Hardware ID (HWID) dựa trên số sê-ri của ổ đĩa hệ thống (C:\).
// Số sê-ri ổ đĩa là một giá trị duy nhất được gán cho mỗi volume khi nó được format.
string SystemInfor::getHwid() {
    // API GetVolumeInformationA được sử dụng để lấy thông tin về một volume (ổ đĩa).
    // Nguồn: windows.h (Kernel32.dll)
    /*
    BOOL GetVolumeInformationA(
      LPCSTR  lpRootPathName,         // [in, optional] Đường dẫn đến thư mục gốc của volume. Ví dụ: "C:\\".
      LPSTR   lpVolumeNameBuffer,     // [out, optional] Buffer để nhận tên của volume.
      DWORD   nVolumeNameSize,        // [in] Kích thước của buffer tên volume.
      LPDWORD lpVolumeSerialNumber,   // [out, optional] Con trỏ để nhận số sê-ri của volume.
      LPDWORD lpMaximumComponentLength, // [out, optional] Con trỏ nhận độ dài tối đa của tên file component.
      LPDWORD lpFileSystemFlags,      // [out, optional] Con trỏ nhận các cờ của hệ thống file.
      LPSTR   lpFileSystemNameBuffer, // [out, optional] Buffer để nhận tên hệ thống file (ví dụ: "NTFS").
      DWORD   nFileSystemNameSize     // [in] Kích thước của buffer tên hệ thống file.
    );
    */
    string info;            // Chuỗi để lưu HWID (sẽ là số sê-ri dạng chuỗi).
    DWORD serialNumber;     // Biến kiểu DWORD (unsigned long) để lưu số sê-ri.

    // Gọi GetVolumeInformationA để lấy số sê-ri của ổ "C:\\".
    // Các tham số khác không cần thiết được đặt là NULL hoặc 0.
    if (GetVolumeInformationA("C:\\", NULL, 0, &serialNumber, NULL, NULL, NULL, 0)) {
        // Nếu hàm chạy thành công, chuyển đổi serialNumber (kiểu DWORD) sang std::string.
        info = to_string(serialNumber);
    }
    else {
        // Nếu có lỗi khi lấy thông tin ổ đĩa.
        info = "hwid_error"; // Hoặc một giá trị báo lỗi khác.
    }
    return info; // Trả về số sê-ri dưới dạng chuỗi.
}

// Hàm lấy tên người dùng hiện tại đang đăng nhập vào hệ thống.
string SystemInfor::getUser() {
    // API GetUserNameA được sử dụng để lấy tên người dùng liên kết với luồng hiện tại.
    // Nguồn: windows.h (Advapi32.dll)
    /*
    BOOL GetUserNameA(
      LPSTR   lpBuffer,     // [out] Buffer để nhận tên người dùng (null-terminated).
      LPDWORD pcbBuffer     // [in, out] Con trỏ tới một biến DWORD.
                            //           Khi gọi: chỉ định kích thước của lpBuffer (bao gồm cả null terminator).
                            //           Khi trả về: nếu thành công, chứa số ký tự được copy vào buffer (không bao gồm null terminator).
                            //                      nếu buffer quá nhỏ, chứa kích thước buffer cần thiết (bao gồm null terminator).
    );
    */
    char userName[MAX_PATH]; // MAX_PATH là hằng số định nghĩa độ dài tối đa cho đường dẫn,
    // thường đủ lớn cho tên người dùng (khoảng 260 ký tự).
    DWORD size = sizeof(userName); // Lấy kích thước của buffer userName.

    // Gọi GetUserNameA để điền tên người dùng vào buffer `userName`.
    if (GetUserNameA(userName, &size)) {
        return string(userName); // Chuyển đổi mảng char thành std::string và trả về.
    }
    else {
        return "user_error"; // Trả về nếu có lỗi.
    }
}

// Hàm lấy tên của máy tính.
string SystemInfor::getComputer() {
    // API GetComputerNameA được sử dụng để lấy tên NetBIOS của máy tính cục bộ.
    // Nguồn: windows.h (Kernel32.dll)
    /*
    BOOL GetComputerNameA(
      LPSTR   lpBuffer,     // [out] Buffer để nhận tên máy tính (null-terminated).
      LPDWORD nSize         // [in, out] Con trỏ tới một biến DWORD.
                            //           Khi gọi: chỉ định kích thước của lpBuffer.
                            //           Khi trả về: nếu thành công, chứa số ký tự được copy (không bao gồm null).
                            //                      nếu buffer quá nhỏ, chứa kích thước buffer cần thiết (bao gồm null).
    );
    */
    char computerName[MAX_PATH]; // Buffer để lưu tên máy tính.
    DWORD size = sizeof(computerName); // Kích thước buffer.

    // Gọi GetComputerNameA để lấy tên máy tính.
    if (GetComputerNameA(computerName, &size)) {
        string result(computerName); // Chuyển đổi mảng char thành std::string.
        // Dòng này xóa tất cả các ký tự xuống dòng ('\n') khỏi chuỗi kết quả.
        // Mặc dù GetComputerNameA thường không trả về '\n', đây có thể là một biện pháp phòng ngừa.
        // std::remove di chuyển các phần tử không phải là '\n' lên đầu, và trả về iterator tới vị trí bắt đầu của các phần tử '\n'.
        // result.erase sau đó xóa các phần tử từ vị trí đó đến cuối chuỗi.
        result.erase(remove(result.begin(), result.end(), '\n'), result.end());
        return result;
    }
    else {
        return "computer_error"; // Trả về nếu có lỗi.
    }
}

// Hàm lấy địa chỉ IP public của máy tính bằng cách gọi một dịch vụ web qua PowerShell.
string SystemInfor::getIp() {
    // Câu lệnh PowerShell để lấy IP public từ api.ipify.org.
    // Invoke-RestMethod: Gửi HTTP request.
    // -Uri 'https://api.ipify.org?format=text&ipv=4': URL của dịch vụ, yêu cầu định dạng text và chỉ IPv4.
    string command = "powershell -ExecutionPolicy Bypass -NoProfile -NonInteractive -Command \"(Invoke-RestMethod -Uri 'https://api.ipify.org?format=text')\"";
    char buffer[128];       // Buffer để đọc output từ pipe.
    string result = "";     // Chuỗi để lưu kết quả (địa chỉ IP).

    // _popen: Mở một pipe để chạy một lệnh và đọc output của nó.
    // "r": Mở để đọc.
    // Lệnh sẽ được thực thi trong một tiến trình cmd.exe mới.
    FILE* pipe = _popen(command.c_str(), "r");
    if (!pipe) {
        // Nếu không thể mở pipe (ví dụ: lỗi khi chạy lệnh).
        return "ip_error";
    }

    // Đọc output từ pipe từng dòng một cho đến khi hết.
    // fgets đọc tối đa sizeof(buffer)-1 ký tự hoặc đến khi gặp '\n' hoặc EOF.
    while (fgets(buffer, sizeof(buffer), pipe) != nullptr) {
        result += buffer; // Nối dòng đọc được vào chuỗi `result`.
    }

    _pclose(pipe); // Đóng pipe và chờ tiến trình con kết thúc.

    // Xóa ký tự xuống dòng ('\n') có thể có ở cuối chuỗi kết quả.
    result.erase(remove(result.begin(), result.end(), '\n'), result.end());
    if (result.empty()) return "ip_error_empty"; // Nếu kết quả rỗng sau khi xử lý
    return result; // Trả về địa chỉ IP.
}

// Hàm lấy thông tin quốc gia dựa trên địa chỉ IP public, sử dụng dịch vụ web qua PowerShell.
string SystemInfor::getLocation() {
    // Câu lệnh PowerShell để lấy mã quốc gia từ ipinfo.io.
    // Dịch vụ này trả về mã quốc gia (ví dụ: "VN" cho Việt Nam).
    string command = "powershell -ExecutionPolicy Bypass -NoProfile -NonInteractive -Command \"(Invoke-RestMethod -Uri 'https://ipinfo.io/country')\"";
    char buffer[128];   // Buffer để đọc output.
    string result = ""; // Chuỗi lưu kết quả (mã quốc gia).

    // Mở pipe để chạy lệnh PowerShell.
    FILE* pipe = _popen(command.c_str(), "r");
    if (!pipe) {
        return "location_error"; // Lỗi nếu không mở được pipe.
    }

    // Đọc output từ pipe.
    while (fgets(buffer, sizeof(buffer), pipe) != nullptr) {
        result += buffer;
    }

    _pclose(pipe); // Đóng pipe.

    // Xóa ký tự xuống dòng ('\n') khỏi kết quả.
    result.erase(remove(result.begin(), result.end(), '\n'), result.end());
    if (result.empty()) return "location_error_empty"; // Nếu kết quả rỗng
    return result; // Trả về mã quốc gia.
}

// Hàm lấy tên phiên bản hệ điều hành đang chạy.
string SystemInfor::getOs() {
    // Câu lệnh PowerShell để lấy thuộc tính "Caption" từ lớp WMI Win32_OperatingSystem.
    // "Caption" thường chứa tên đầy đủ của hệ điều hành (ví dụ: "Microsoft Windows 10 Pro").
    // Get-CimInstance là lệnh hiện đại hơn Get-WmiObject.
    string command = "powershell -ExecutionPolicy Bypass -NoProfile -NonInteractive -Command \"(Get-CimInstance Win32_OperatingSystem).Caption\"";
    char buffer[128];   // Buffer để đọc output.
    string result = ""; // Chuỗi lưu kết quả (tên OS).

    // Mở pipe để chạy lệnh PowerShell.
    FILE* pipe = _popen(command.c_str(), "r");
    if (!pipe) {
        // Trong code gốc bạn để là "country_error", có lẽ nên là "os_error".
        return "os_error";
    }

    // Đọc output từ pipe.
    while (fgets(buffer, sizeof(buffer), pipe) != nullptr) {
        result += buffer;
    }

    _pclose(pipe); // Đóng pipe.

    // Xóa ký tự xuống dòng ('\n') khỏi kết quả.
    result.erase(remove(result.begin(), result.end(), '\n'), result.end());
    if (result.empty()) return "os_error_empty"; // Nếu kết quả rỗng
    return result; // Trả về tên hệ điều hành.
}