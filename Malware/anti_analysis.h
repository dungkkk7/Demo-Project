#pragma once

#include <windows.h>
class AntiAnalysis {

public:
	AntiAnalysis();
	~AntiAnalysis();

	//1.Kỹ thuật Chống Gỡ lỗi (Anti-Debugging Techniques)

	/* API CALL checking
	API Calls : IsDebuggerPresent() (kiểm tra cờ BeingDebugged trong PEB), CheckRemoteDebuggerPresent(),
	NtQueryInformationProcess(với ProcessDebugPort, ProcessDebugObjectHandle, ProcessDebugFlags).
	*/ 
	void IsDebuggerPresentCheck();

	void CheckRemoteDebuggerPresentCheck();

	void NtQueryInformationProcessCheck();


	// Timing Check -- thời gian dự kiến thưc thi hiện của chương trình 
	void TimingCheck();

	// PEB flag check 
	void PEBFlagCheck();



	// 2. Kỹ thuật Chống Máy ảo/Sandbox (Anti-VM/Sandbox Strategies); 
	
	// Check CPU ID (CPUID instruction) -- kiểm tra thông tin CPU, nếu là máy ảo thì sẽ có thông tin khác với máy thật
	void checkVirtualHardwareConfig(); 



	// Kiểm tra phần mềm/driver đặc trưng của VM (VM-Specific Software/Drivers)
	void checkVMDrivers();


	// Kiểm tra các tạo tác (artifacts) của hypervisor và sandbox 
	void checkHypervisorArtifacts();


	// Kỹ thuật dựa trên thời gian(Timing Attacks) -- đã kiểm tra ở trên cân nhác 


	// Truy vấn CPUID (CPUID Interrogation)
	void CPUIDInterrogationCheck();


	// Phân tích hành vi hệ thống và người dùng (System and User Behavior Analysis)
	void SystemUserBehaviorAnalysisCheck();


	//3. các kĩ thuât khác như: osfucation hay code packing, code encryption sẽ triển khai trong các phần khác của mã nguồn

}; 